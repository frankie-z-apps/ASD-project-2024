Ideas to optimize the execution time of algorithms:

ALL:

- rename parameters of algorithms using "start/end" instead of "low/high"


E-LEARNING TESTS:

- create a module just for testing on e-learning interface


QUICK_SELECT:

-   run the validity test on parameters only once and not for every recursive call
v   try with iterative version instead of recursive
v   differentiate between randomized partition and
    fixed-pivot partition


HEAP_SELECT:

- eliminate recursion in all Heap methods


MEDIAN_OF_MEDIANS_SELECT:

v   differentiate between median of medians algorithm and median of medians SELECT algorithm -> achieve modularity


BENCHMARK:

-   import directly a single algorithm-module instead of algorithms.py file
    so that is easier to modify and test a single module at a time

v   run specific tests on different versions of the SAME algorithm
    to get an idea whether the modifications work or not,
    and to identify the one that performs better

-   verify that changing the starting position of the timer in 
    measure() function does not mess up things

v   add a legenda explaining the colors associated with the algorithms

-   study the effect of varying the range of number values for the elements of 
    the arrays

-   to eliminate the noise produced by copying the same array for every 
    test for all the k-values, we could initialize all the copies beforehand,
    so that the initialization time won't be counted

v   run tests on the same array for each algorithm